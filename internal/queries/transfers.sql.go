// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfers.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLastEvents = `-- name: GetLastEvents :many
SELECT timestamp, sender, recipient, amount, tx_hash, token_address FROM erc20_transfers ORDER BY timestamp DESC LIMIT $1
`

func (q *Queries) GetLastEvents(ctx context.Context, limit int32) ([]Erc20Transfer, error) {
	rows, err := q.db.Query(ctx, getLastEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Erc20Transfer
	for rows.Next() {
		var i Erc20Transfer
		if err := rows.Scan(
			&i.Timestamp,
			&i.Sender,
			&i.Recipient,
			&i.Amount,
			&i.TxHash,
			&i.TokenAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTransfer = `-- name: SaveTransfer :exec
INSERT INTO erc20_transfers (timestamp, sender, recipient, amount, tx_hash, token_address) 
VALUES ($1, $2, $3, $4, $5, $6)
`

type SaveTransferParams struct {
	Timestamp    pgtype.Timestamptz
	Sender       string
	Recipient    string
	Amount       pgtype.Numeric
	TxHash       string
	TokenAddress string
}

func (q *Queries) SaveTransfer(ctx context.Context, arg SaveTransferParams) error {
	_, err := q.db.Exec(ctx, saveTransfer,
		arg.Timestamp,
		arg.Sender,
		arg.Recipient,
		arg.Amount,
		arg.TxHash,
		arg.TokenAddress,
	)
	return err
}
